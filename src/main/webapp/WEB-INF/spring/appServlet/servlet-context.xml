<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- mvc관련 일처리 태그 -->
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<!-- **는 계층을 따지지 않고 모든것을 뜻함  -->

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.kh.spring" /><!-- 설정한 패키지 하위에 있는거 빈으로 등록해줌 -->
	
	<!-- #8. interceptor 등록 -->
	<interceptors>
		<interceptor>
			<mapping path="/**"/>
			<beans:bean id="logInterceptor" class="com.kh.spring.common.interceptor.LogInterceptor"/>
		</interceptor>
		<!-- <interceptor>
			<mapping path="/member/memberDetail.do"/>
			<mapping path="/member/memberUpdate.do"/>
			<mapping path="/board/**"/>
			<exclude-mapping path="/board/boardList.do" />
			<exclude-mapping path="/board/boardDetail.do" />
			<exclude-mapping path="/board/fileDownload.do" />
			<beans:bean id="loginInterceptor" class="com.kh.spring.common.interceptor.LoginInterceptor"></beans:bean>
		</interceptor> -->
	</interceptors>
	
	<!-- #9.1. aop관련 어노테이션 등록처리 -->
	<!-- #11.2. root-context의 트랜잭션 관련 처리를 가져와 servlet-context에 적용 -->
	<aop:aspectj-autoproxy/>
	
	<!-- #10.1 multipartResover 등록 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	<!-- 용량제한 안적으면 무제한. 서버터짐 -->
		<beans:property name="maxUploadSize" value="52428800"></beans:property><!-- 50mb : 파일요청 한건당 첨부할 파일등의 총 용량 -->
		<beans:property name="maxUploadSizePerFile" value="10245760"></beans:property><!-- 10mb : 한건의 각 파일당 용량 -->
		<beans:property name="maxInMemorySize" value="10240"></beans:property><!-- 10kb이상이면 임시파일을 생성해서 관리 -->
	</beans:bean>
	
	<!-- #12.1. jsonView빈 등록 -->
	<beans:bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView">
		<beans:property name="contentType" value="application/json; charset=utf-8"/>
	</beans:bean>
	
	<!-- #12.2. BeanNameViewResolver등록(viewName에 해당하는 빈을 view로 연결하는 resolver -->
	<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<!-- viewResolver끼리의 우선순위설정: 1순위로 했으므로 view이름에 맞는 빈이 있는지 먼저 검사, 
										없으면 jsp찾는InternalResourceViewResolver가 검사 -->
		<beans:property name="order" value="1"/>
	</beans:bean>
	
	<!-- #13.1 jackson message converter bean등록 -->
	<beans:bean id="jacksonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
</beans:beans>
